import java.util.regex.Pattern

apply plugin: 'com.android.library'

task wrapper(type: Wrapper) {
    gradleVersion = '2.4'
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'jacoco'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}
apply plugin: 'android-library'

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    archives {
        extendsFrom configurations.default
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:2.4'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.easytesting:fest-util:1.2.5'
    testCompile 'org.easytesting:fest-reflect:1.4.1'

}



android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"
    buildTypes {
        debug {
            testCoverageEnabled = true
        }
    }

}

//READ VERSION NAME
def manifestFile = file("${projectDir}/src/main/AndroidManifest.xml")
def pattern = Pattern.compile("versionName=\"([\\d\\.\\w\\-]+)\"")
def manifestText = manifestFile.getText()
def matcher = pattern.matcher(manifestText)
matcher.find()
def manifestVersionName = matcher.group(1)
println "version name:${manifestVersionName}"

//create jar tasks
android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    println "checking variant ${name}"
    if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
        return; // Skip debug builds.
    }
    def suffix = name.capitalize()
    println "found release variant"
    def jarTask = project.tasks.create(name: "jar${suffix}", type: Jar){
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        from 'LICENSE.txt'
    }
    def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
    }

    def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
        from android.sourceSets.main.getJava().getSrcDirs()
        classifier = 'sources'
    }
    artifacts.add('archives', jarTask);
    artifacts.add('archives', javadocJarTask);
    artifacts.add('archives', sourcesJarTask);
}
//create jar tasks end

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(android.sourceSets.main.getJava().getSrcDirs())
    sourceDirectories = files(android.sourceSets.main.getJava().getSrcDirs())
    executionData = files("$buildDir/jacoco/testDebug.exec")

    reports {
        xml.enabled = true
        html.enabled = true
    }

}